/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hadoop
 */
import java.io.BufferedReader;
import java.io.BufferedReader.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
public class second extends javax.swing.JFrame {

    /**
     * Creates new form second
     */
    public second() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Start Installation");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        jLabel1.setText("Installing...");
       
        String cmd ="mv /home/hadoop/Desktop/files/hadoop-2.6.0.tar.gz  hadoop-2.6.0.tar.gz  ";
        try{
            Process process= Runtime.getRuntime().exec(cmd);
            InputStream in =process.getInputStream();

            BufferedReader reader = new BufferedReader(new InputStreamReader(
                in));
        String line = null;
        while ((line = reader.readLine())!= null) {
            jTextArea1.setText(""+line);
        }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        jProgressBar1.setValue(5);

        cmd ="tar -xvzf hadoop-2.6.0.tar.gz";
        try{
            Process process= Runtime.getRuntime().exec(cmd);
            InputStream in =process.getInputStream();

            BufferedReader reader = new BufferedReader(new InputStreamReader(
                in));
        String line = null;
        while ((line = reader.readLine())!= null) {
           jTextArea1.setText(""+line);
        }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        jProgressBar1.setValue(10);

        
        
        jProgressBar1.setValue(15);
        cmd ="mv /home/hadoop/Desktop/hadoop-2.6.0 /home/hadoop/hadoop";
        try{
            Process process= Runtime.getRuntime().exec(cmd);
            InputStream in =process.getInputStream();

            BufferedReader reader = new BufferedReader(new InputStreamReader(
                in));
        String line = null;
        while ((line = reader.readLine())!= null) {
            jTextArea1.setText(""+line);
        }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        jProgressBar1.setValue(20);
       cmd ="chmod -R 777 /home/hadoop/hadoop";
        try{
            Process process= Runtime.getRuntime().exec(cmd);
            InputStream in =process.getInputStream();

            BufferedReader reader = new BufferedReader(new InputStreamReader(
                in));
        String line = null;
        while ((line = reader.readLine())!= null) {
            jTextArea1.setText(""+line);
        }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        jProgressBar1.setValue(25); 
        cmd ="mkdir -p /home/hadoop/hadoop-tmp/hdfs/namenode";
        try{
            Process process= Runtime.getRuntime().exec(cmd);
            InputStream in =process.getInputStream();

            BufferedReader reader = new BufferedReader(new InputStreamReader(
                in));
        String line = null;
        while ((line = reader.readLine())!= null) {
            jTextArea1.setText(""+line);
        }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        jProgressBar1.setValue(29);
        cmd ="mkdir -p /home/hadoop/hadoop-tmp/hdfs/datanode";
        try{
            Process process= Runtime.getRuntime().exec(cmd);
            InputStream in =process.getInputStream();

            BufferedReader reader = new BufferedReader(new InputStreamReader(
                in));
        String line = null;
        while ((line = reader.readLine())!= null) {
            jTextArea1.setText(""+line);
        }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        jProgressBar1.setValue(33);
        cmd ="chown hadoop:hadoop -R /home/hadoop/hadoop_tmp/";
        try{
            Process process= Runtime.getRuntime().exec(cmd);
            InputStream in =process.getInputStream();

            BufferedReader reader = new BufferedReader(new InputStreamReader(
                in));
        String line = null;
        while ((line = reader.readLine())!= null) {
            jTextArea1.setText(""+line);
        }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        jProgressBar1.setValue(36);
        FileInputStream in = null;
        FileOutputStream out = null;

        try {
            in = new FileInputStream("/home/hadoop/Desktop/files/input");
            out = new FileOutputStream("/home/hadoop/.bashrc");
            int c;
            while ((c = in.read()) != -1) {
                out.write(c);}
            //  out.write(str);
        }catch (Exception ex) {
            ex.printStackTrace();
        }
        finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ex) {
                    Logger.getLogger(second.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException ex) {
                    Logger.getLogger(second.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } jProgressBar1.setValue(41);
        
         jProgressBar1.setValue(45);
         jProgressBar1.setValue(52);
        FileInputStream in1 = null;
        FileOutputStream out1 = null;

        try {
            in1 = new FileInputStream("/home/hadoop/Desktop/files/input2");
            out1 = new FileOutputStream("/home/hadoop/hadoop/etc/hadoop/hadoop-env.sh");
            int c;
            while ((c = in1.read()) != -1) {
                out1.write(c);}
            //  out.write(str);
        }catch (Exception ex) {
            ex.printStackTrace();
        }
        finally {
            if (in1 != null) {
                try {
                    in1.close();
                } catch (IOException ex) {
                    Logger.getLogger(second.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (out1 != null) {
                try {
                    out1.close();
                } catch (IOException ex) {
                    Logger.getLogger(second.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } jProgressBar1.setValue(56);
        FileInputStream in2 = null;
        FileOutputStream out2 = null;

        try {
            in2 = new FileInputStream("/home/hadoop/Desktop/files/input3");
            out2 = new FileOutputStream("/home/hadoop/hadoop/etc/hadoop/core-site.xml");
            int c;
            while ((c = in2.read()) != -1) {
                out2.write(c);}
            //  out.write(str);
        }catch (Exception ex) {
            ex.printStackTrace();
        }
        finally {
            if (in2 != null) {
                try {
                    in2.close();
                } catch (IOException ex) {
                    Logger.getLogger(second.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (out2 != null) {
                try {
                    out2.close();
                } catch (IOException ex) {
                    Logger.getLogger(second.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }jProgressBar1.setValue(60);
        FileInputStream in3 = null;
        FileOutputStream out3 = null;

        try {
            in3 = new FileInputStream("/home/hadoop/Desktop/files/input4");
            out3 = new FileOutputStream("/home/hadoop/hadoop/etc/hadoop/hdfs-site.xml");
            int c;
            while ((c = in3.read()) != -1) {
                out3.write(c);}
            //  out.write(str);
        }catch (Exception ex) {
            ex.printStackTrace();
        }
        finally {
            if (in3 != null) {
                try {
                    in3.close();
                } catch (IOException ex) {
                    Logger.getLogger(second.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (out3 != null) {
                try {
                    out3.close();
                } catch (IOException ex) {
                    Logger.getLogger(second.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } jProgressBar1.setValue(70);
        FileInputStream in4 = null;
        FileOutputStream out4 = null;

        try {
            in4 = new FileInputStream("/home/hadoop/Desktop/files/input5");
            out4 = new FileOutputStream("/home/hadoop/hadoop/etc/hadoop/mapred-site.xml");
            int c;
            while ((c = in4.read()) != -1) {
                out4.write(c);}
            //  out.write(str);
        }catch (Exception ex) {
            ex.printStackTrace();
        }
        finally {
            if (in4 != null) {
                try {
                    in4.close();
                } catch (IOException ex) {
                    Logger.getLogger(second.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (out4 != null) {
                try {
                    out4.close();
                } catch (IOException ex) {
                    Logger.getLogger(second.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } jProgressBar1.setValue(74);
        FileInputStream in5 = null;
        FileOutputStream out5 = null;

        try {
            in5 = new FileInputStream("/home/hadoop/Desktop/files/input6");
            out5 = new FileOutputStream("/home/hadoop/hadoop/etc/hadoop/yarn-site.xml");
            int c;
            while ((c = in5.read()) != -1) {
                out5.write(c);}
            //  out.write(str);
        }catch (Exception ex) {
            ex.printStackTrace();
        }
        finally {
            if (in5 != null) {
                try {
                    in5.close();
                } catch (IOException ex) {
                    Logger.getLogger(second.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (out5 != null) {
                try {
                    out5.close();
                } catch (IOException ex) {
                    Logger.getLogger(second.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } jProgressBar1.setValue(81);
        cmd ="rm -r /home/hadoop/hadoop-tmp/hdfs/datanode/current";
        try{
            Process process= Runtime.getRuntime().exec(cmd);
            InputStream in8 =process.getInputStream();

            BufferedReader reader = new BufferedReader(new InputStreamReader(
                in8));
        String line = null;
        while ((line = reader.readLine())!= null) {
            jTextArea1.setText(""+line);
        }

        } catch (Exception ex) {
            ex.printStackTrace();
        } jProgressBar1.setValue(87);
        cmd ="hdfs namenode-format";
        try{
            Process process= Runtime.getRuntime().exec(cmd);
            InputStream in9 =process.getInputStream();

            BufferedReader reader = new BufferedReader(new InputStreamReader(
                in9));
        String line = null;
        while ((line = reader.readLine())!= null) {
            jTextArea1.setText(""+line);
        }

        } catch (Exception ex) {
            ex.printStackTrace();
        } jProgressBar1.setValue(90);
         jProgressBar1.setValue(99);
        cmd ="start-all.sh";
        try{
            Process process= Runtime.getRuntime().exec(cmd);
            InputStream in10 =process.getInputStream();

            BufferedReader reader = new BufferedReader(new InputStreamReader(
                in10));
        String line = null;
        while ((line = reader.readLine())!= null) {
            jTextArea1.setText(""+line);
        }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
                        new third().setVisible(true);
this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(second.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(second.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(second.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(second.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new second().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
